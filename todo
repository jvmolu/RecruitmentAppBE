1. Refactor ZodParsingError and AuthError handling in a error handler to remove 
the error response creation code from services and controllers and use the error handler instead.

2. Add 404 status code in FIND calls and UPDATE calls if no data is found based on search params.

3. Add <= and >= Functionality -- P1

4. LIMIT and OFFSET and ORDER_BY Search Functionality -- Done for jobs Only -- P1

5. Write Join Queries to return combined Data -- Done for jobs only -- P1

6. From all routes, in CATCH (if there is try catch), do NEXT(error) as we have added a common error handling middleware

7. Add a check - currently the value of orderBy params is directly going into sql, - ADD VALIDATIONS FOR IT

8. Add a Response Filtering Layer before sending output (Specially Needed for Job Data)

9. Add selectFields input option in all GET calls to select only required fields - V2 (This way FE controls what fields are required from table - Light Responses)

10. Update Transactional Decorator to not fetch lastArg and try to find Client but look for an options object which should contain client - remove dependency from ordering of arguments

11. In Email Invite Send, check jobId is valid before hitting sendInvite

12. Application Resume Upload is at /cand/applicationID.. make it /cand/jobId-candId..

13. Lock Routes which cannot be accessed simultaneously multiple times (ex: same guy clicks submit application to same job multiple times before first request is processed)

14. Implement fetching userIdToAccess in Authorise Self User Middleware for Application Routes and everywhere it is being used.

15. Remove Code for File Parsed SQL Table and its repo and services and other files and also from DbTable Enum

16. TTL for parsed resume should be same as the interview time limit + buffer

17. For all entities:
Convert:
 type ApplicationWithRelatedData = ApplicationType & { job : Partial<JobWithCompanyData> | undefined, candidate: Partial<UserWithProfileData> | undefined, lifecycle: ApplicationLifecycleType[] | undefined }
TO
 type ApplicationWithRelatedData = ApplicationType & { job? : Partial<JobWithCompanyData>, candidate?: Partial<UserWithProfileData>, lifecycle?: ApplicationLifecycleType[] }

18. Add a check in Application Routes to check if the user is allowed to access the application data [Some similar authorisation middlewares seem to be missing, check it once in all routes] [BASICALLY ADD AUTHORIZATION LOGIC TO ALL ROUTES]

19. Make Interview Service return first when submitAndGenerateNext is called and later generate the next question.
Generate next question by calling AI Service after you have submitted the answer to the current question and returned the OK response to the user.

20. Use Message Queues + Listeners rather than using setImmediate to work in parallel while generatingNextQuestion
Expected Flow:
(Push Request in Message Queue -> AI Listens and responds in another Message Queue -> Listen to it and save response in DB)

21. Lock start interview routes

FE Changes:

1. Add Delete Pop Up for all Delete Actions

2. Link Pages from Dashboard, Update users->candidates

3. Enable Partner Comapnies and their Creation

4. ALLOW ADMIN TO EDIT ANY USER